// =====================================================
// üìò INTRODU√á√ÉO √ÄS FUN√á√ïES EM JAVASCRIPT
// =====================================================
//
// Em JavaScript, fun√ß√µes s√£o blocos de c√≥digo que executam uma tarefa espec√≠fica.
// Elas servem para evitar repeti√ß√£o de c√≥digo, deixar o programa mais organizado
// e facilitar a manuten√ß√£o.
//
// Podemos pensar nelas como ‚Äúreceitas‚Äù: voc√™ passa ingredientes (par√¢metros),
// a fun√ß√£o segue o passo a passo e retorna um resultado.
//
// =====================================================
// üß© 1. DECLARANDO UMA FUN√á√ÉO SIMPLES
// =====================================================

function dizerOla() {
    console.log("Ol√°! Seja bem-vindo ao mundo das fun√ß√µes üöÄ");
  }
  
  // Chamando (executando) a fun√ß√£o:
  dizerOla();
  
  // ‚ûú ‚Äúfunction‚Äù √© a palavra reservada usada para criar uma fun√ß√£o.
  // ‚ûú ‚ÄúdizerOla‚Äù √© o nome da fun√ß√£o (evite espa√ßos e use camelCase).
  // ‚ûú Os par√™nteses ‚Äú()‚Äù indicam que √© uma fun√ß√£o sendo chamada.
  
  
  // =====================================================
  // ‚öôÔ∏è 2. FUN√á√ïES COM PAR√ÇMETROS (ENTRADAS)
  // =====================================================
  //
  // Podemos passar valores para a fun√ß√£o atrav√©s de par√¢metros.
  // Eles s√£o como ‚Äúvari√°veis internas‚Äù que s√≥ existem dentro da fun√ß√£o.
  
  function somar(a, b) {
    return a + b;
  }
  
  const resultado = somar(5, 7);
  console.log("Resultado da soma:", resultado);
  
  // ‚ûú ‚Äúa‚Äù e ‚Äúb‚Äù s√£o par√¢metros.
  // ‚ûú ‚Äúreturn‚Äù devolve um valor para quem chamou a fun√ß√£o.
  
  
  // =====================================================
  // üéØ 3. FUN√á√ïES COM RETORNO E SEM RETORNO
  // =====================================================
  //
  // Algumas fun√ß√µes retornam algo (como a soma acima).
  // Outras apenas executam uma a√ß√£o, sem devolver valor.
  
  function mostrarMensagem(nome) {
    console.log(`Ol√°, ${nome}!`);
  }
  
  mostrarMensagem("Gabriel"); // Exibe: Ol√°, Gabriel!
  
  // ‚ûú Essa fun√ß√£o N√ÉO tem ‚Äúreturn‚Äù, ent√£o ela n√£o devolve nada, apenas mostra algo no console.
  
  
  // =====================================================
  // üß† 4. ARROW FUNCTIONS (FUN√á√ïES DE SETA)
  // =====================================================
  //
  // S√£o uma forma mais curta e moderna de escrever fun√ß√µes.
  // Muito usada em projetos com Node.js e React, por exemplo.
  
  const multiplicar = (x, y) => {
    return x * y;
  };
  
  console.log("Multiplica√ß√£o:", multiplicar(3, 4));
  
  // ‚ûú Se o corpo da fun√ß√£o tiver apenas uma linha, d√° pra deixar ainda mais curto:
  const dobrar = n => n * 2;
  console.log("Dobro:", dobrar(6));
  
  
  // =====================================================
  // üîí 5. ESCOPO DE VARI√ÅVEIS EM FUN√á√ïES
  // =====================================================
  //
  // Vari√°veis criadas dentro de uma fun√ß√£o s√≥ existem dentro dela.
  
  function testeEscopo() {
    const mensagem = "Sou vis√≠vel apenas aqui dentro!";
    console.log(mensagem);
  }
  
  testeEscopo();
  // console.log(mensagem); ‚ùå Isso daria erro, pois ‚Äúmensagem‚Äù s√≥ existe dentro da fun√ß√£o.
  
  
  // =====================================================
  // üßÆ 6. FUN√á√ïES AN√îNIMAS E CALLBACKS
  // =====================================================
  //
  // Fun√ß√µes tamb√©m podem ser armazenadas em vari√°veis.
  // Isso √© √∫til para passar fun√ß√µes como ‚Äúargumentos‚Äù de outras fun√ß√µes.
  
  const saudacao = function(nome) {
    return `Ol√°, ${nome}!`;
  };
  
  console.log(saudacao("Maria"));
  
  // Exemplo de callback (fun√ß√£o passada como argumento)
  function executarAcao(acao, valor) {
    console.log("Executando a√ß√£o...");
    console.log(acao(valor));
  }
  
  executarAcao(dobrar, 10); // Passa a fun√ß√£o ‚Äúdobrar‚Äù como argumento
  